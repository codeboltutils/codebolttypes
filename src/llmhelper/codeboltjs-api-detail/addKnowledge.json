{"success":true,"data":{"id":67,"name":"addKnowledge","category_id":19,"category_name":"DbMemory","description":"Adds a key-value pair to the in-memory database. Supports storing various data types including strings, numbers, objects, and arrays.","short_description":"Adds a key-value pair to the in-memory database. Supports storing various data types including strings, numbers, objects, and arrays.","function":"codebolt.dbmemory.addKnowledge(key: string, value: any) -> Promise<MemorySetResponse>","examples":[{"title":"Store user information","code":"const result = await codebolt.dbmemory.addKnowledge('user:123', { \n  name: 'John Doe', \n  age: 30,\n  role: 'developer'\n});\nconsole.log('Response type:', result.type);\nconsole.log('Key stored:', result.key);\nconsole.log('Success:', result.success);"},{"title":"Store configuration and arrays","code":"// Store configuration setting\nconst configResult = await codebolt.dbmemory.addKnowledge('config:theme', 'dark');\nconsole.log('Theme stored:', configResult.type);\n\n// Store array data\nconst tagsResult = await codebolt.dbmemory.addKnowledge('tags:project', ['javascript', 'nodejs', 'codebolt']);\nconsole.log('âœ… Tags stored:', tagsResult.type);"}],"tags":[],"created_at":"2025-07-10 07:11:51","updated_at":"2025-07-10 07:11:51","input_zod_schema":{},"output_zod_schema":{},"input_example":{},"output_example":{},"input_json_schema":{"type":"object","properties":{"key":{"type":"string","description":"The unique key under which to store the value. Supports namespaced keys"},"value":{"description":"The value to be stored. Can be string, number, boolean, object, array, null, or undefined"}},"required":["key","value"]},"output_json_schema":{"type":"object","properties":{"type":{"type":"string","enum":["memorySetResponse"]},"key":{"type":"string"},"value":{},"success":{"type":"boolean"},"message":{"type":"string"},"error":{"type":"string"},"messageId":{"type":"string"},"threadId":{"type":"string"}},"required":["type"]},"input_variable_description":{},"output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--dbmemory-addKnowledge","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: addKnowledge\ncbbaseinfo:\n  description: Adds a key-value pair to the in-memory database. Supports storing various data types including strings, numbers, objects, and arrays.\ncbparameters:\n  parameters:\n    - name: key\n      typeName: string\n      description: The unique key under which to store the value. Supports namespaced keys (e.g., 'user:123', 'config:theme').\n    - name: value\n      typeName: any\n      description: The value to be stored. Can be string, number, boolean, object, array, null, or undefined.\n  returns:\n    signatureTypeName: Promise<MemorySetResponse>\n    description: A promise that resolves with a `MemorySetResponse` object containing the response type and operation metadata.\ndata:\n  name: addKnowledge\n  category: dbmemory\n  link: addKnowledge.md\n---"}}