{"success":true,"data":{"id":26,"name":"AddToAgentState","category_id":13,"category_name":"CBState","description":"Adds a key-value pair to the agent's state on the server via WebSocket.","short_description":"Add key-value pair to agent state","function":"codebolt.cbstate.addToAgentState(key: string, value: string)","examples":"// Save a user's theme preference for this session\nconst result = await codebolt.cbstate.addToAgentState('user_preference', 'dark_theme');\nconsole.log('Response:', result);\n// Output: { type: 'addToAgentStateResponse', payload: { sucess: true } }\n\n// Store session ID\nawait codebolt.cbstate.addToAgentState('session_id', 'sess_' + Date.now());\n\n// Store user language preference\nawait codebolt.cbstate.addToAgentState('user_language', 'en');\n\n// Store debug mode setting\nawait codebolt.cbstate.addToAgentState('debug_mode', 'true');\n\n// Store current timestamp\nawait codebolt.cbstate.addToAgentState('last_activity', new Date().toISOString());\n\n// Store current step in a process\nawait codebolt.cbstate.addToAgentState('current_step', '3');","tags":"addToAgentState","created_at":"2025-07-09 12:26:57","updated_at":"2025-07-09 12:26:57","input_zod_schema":{},"output_zod_schema":{},"input_example":"const result = await codebolt.cbstate.addToAgentState('user_preference', 'dark_theme');","output_example":"{\n  \"type\": \"addToAgentStateResponse\",\n  \"payload\": {\n    \"sucess\": true\n  }\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"key\": {\n      \"type\": \"string\",\n      \"description\": \"The key to add to the agent's state.\",\n      \"minLength\": 1\n    },\n    \"value\": {\n      \"type\": \"string\",\n      \"description\": \"The value associated with the key.\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\"key\", \"value\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"addToAgentStateResponse\",\n      \"description\": \"Always 'addToAgentStateResponse'.\"\n    },\n    \"payload\": {\n      \"type\": \"object\",\n      \"description\": \"Contains the response data.\",\n      \"properties\": {\n        \"sucess\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates if the operation was successful. Note: 'sucess' is the actual field name.\"\n        }\n      }\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `key` parameter is a string identifier for the state value. The `value` parameter is the string value to store. Both parameters are required.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--cbstate-addToAgentState","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: addToAgentState\ncbbaseinfo:\n  description: Adds a key-value pair to the agent's state on the server via WebSocket.\ncbparameters:\n  parameters:\n    - name: key\n      typeName: string\n      description: The key to add to the agent's state.\n    - name: value\n      typeName: string\n      description: The value associated with the key.\n  returns:\n    signatureTypeName: Promise\n    description: A promise that resolves with the response to the addition request containing success status.\n    typeArgs:\n      - type: reference\n        name: AddToAgentStateResponse\ndata:\n  name: addToAgentState\n  category: cbstate\n  link: addToAgentState.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to an `AddToAgentStateResponse` object with the following properties:\n\n- **`type`** (string): Always \"addToAgentStateResponse\".\n- **`payload`** (object, optional): Contains the response data including success status.\n- **`success`** (boolean, optional): Indicates if the operation was successful.\n- **`message`** (string, optional): A message with additional information.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\n## What is addToAgentState?\n\nThe `addToAgentState` function allows you to store temporary information that's specific to your current agent session. Think of it as a temporary storage system where you can save data that only needs to exist while your agent is running.\n\n**Key Points:**\n- ü§ñ **Agent-specific storage** - Data is only available to the current agent session\n- ‚è±Ô∏è **Temporary** - Information is cleared when the agent session ends\n- üîÑ **Session-based** - Perfect for storing temporary settings and session data\n- üìù **String values only** - All values must be stored as strings"}}