{"success":true,"data":{"id":37,"name":"WaitForReply","category_id":14,"category_name":"Chat","description":"Waits for a reply to a sent message.","short_description":"Wait for user reply to message","function":"codebolt.chat.waitforReply(message: string)","examples":"// Send a message and wait for user reply\nconst userReply = await codebolt.chat.waitforReply(\"Please provide your feedback on the current implementation.\");\nconsole.log('User replied:', userReply);\n\n// Access specific properties of the reply\nconsole.log('Reply content:', userReply.content);\nconsole.log('Reply timestamp:', userReply.timestamp);\nconsole.log('Sender:', userReply.sender);\n\n// Example with conditional logic based on reply\nconst response = await codebolt.chat.waitforReply(\"Do you want to continue with the deployment?\");\nif (response.content.toLowerCase().includes('yes')) {\n    console.log('User confirmed deployment');\n    // Proceed with deployment\n} else {\n    console.log('User declined deployment');\n    // Handle cancellation\n}\n\n// Wait for reply and process the response\nconst feedback = await codebolt.chat.waitforReply(\"How would you rate this feature from 1-10?\");\nconst rating = parseInt(feedback.content);\nif (rating >= 8) {\n    console.log('Excellent feedback!');\n} else if (rating >= 5) {\n    console.log('Good feedback, room for improvement');\n} else {\n    console.log('We need to improve this feature');\n}","tags":"waitforReply","created_at":"2025-07-09 12:34:40","updated_at":"2025-07-09 12:34:40","input_zod_schema":{},"output_zod_schema":{},"input_example":"const reply = await codebolt.chat.waitforReply(\"Please provide your input:\");","output_example":"{\n  \"type\": \"user_message\",\n  \"id\": \"msg_123456\",\n  \"content\": \"This is my response to your question\",\n  \"sender\": \"user\",\n  \"timestamp\": \"2025-01-20T10:30:00.000Z\",\n  \"text\": \"This is my response to your question\",\n  \"images\": [],\n  \"success\": true\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"The message for which a reply is expected.\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\"message\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"description\": \"The type of the WebSocket response.\"\n    },\n    \"id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the message.\"\n    },\n    \"content\": {\n      \"type\": \"string\",\n      \"description\": \"The actual message content/text from the user.\"\n    },\n    \"sender\": {\n      \"type\": \"string\",\n      \"const\": \"user\",\n      \"description\": \"Always 'user' for this response.\"\n    },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"description\": \"When the message was sent (ISO 8601 format).\"\n    },\n    \"text\": {\n      \"type\": \"string\",\n      \"description\": \"The text content of the message.\"\n    },\n    \"images\": {\n      \"type\": \"array\",\n      \"description\": \"Any images included in the message.\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\", \"id\", \"content\", \"sender\", \"timestamp\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `message` parameter is required and contains the message text for which a reply is expected.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--chat-waitforReply","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: waitforReply\ncbbaseinfo:\n  description: Waits for a reply to a sent message.\ncbparameters:\n  parameters:\n    - name: message\n      typeName: string\n      description: The message for which a reply is expected.\n  returns:\n    signatureTypeName: Promise\n    description: A promise that resolves with the reply.\n    typeArgs:\n      - type: intrinsic\n        name: string\ndata:\n  name: waitforReply\n  category: chat\n  link: waitforReply.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `UserMessage` object with comprehensive message information including content, metadata, and timing.\n\n### Explanation\n\nThe `codebolt.chat.waitforReply(message: string)` function is used to send a message on the codebolt chat and wait for the reply. This function enables real-time communication by allowing the script to send text messages on the codebolt chat. This function returns the reply message, which we can store in a variable and use."}}