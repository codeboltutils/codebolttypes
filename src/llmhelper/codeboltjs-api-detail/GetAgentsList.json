{"success":true,"data":{"id":6,"name":"GetAgentsList","category_id":11,"category_name":"Agent","description":"Retrieves a list of agents based on the specified type.","short_description":"Get a list of agents by type (downloaded, all, local)","function":"codebolt.agent.getAgentsList(type: string)","examples":"// Example 1: Get the list of downloaded agents (default behavior)\nasync function getDownloadedAgents() {\n  const downloadedAgents = await codebolt.agent.getAgentsList(); // 'downloaded' is the default\n  console.log(\"Downloaded Agents:\", downloadedAgents);\n  if (downloadedAgents.success && downloadedAgents.agents.length > 0) {\n    console.log(`Found ${downloadedAgents.agents.length} downloaded agents.`);\n    const firstAgent = downloadedAgents.agents[0];\n    console.log(`First agent name: ${firstAgent.function.name}`);\n  }\n}\ngetDownloadedAgents();\n\n// Example 2: Get the list of all available agents\nasync function getAllAgents() {\n  const allAgents = await codebolt.agent.getAgentsList('all');\n  console.log(\"All Agents:\", allAgents);\n  if (allAgents.success) {\n    console.log(`Total number of agents: ${allAgents.agents.length}`);\n  }\n}\ngetAllAgents();\n\n// Example 3: Get the list of only local agents\nasync function getLocalAgents() {\n  const localAgents = await codebolt.agent.getAgentsList('local');\n  console.log(\"Local Agents:\", localAgents);\n  if (localAgents.success) {\n    console.log(`Found ${localAgents.agents.length} local agents.`);\n  }\n}\ngetLocalAgents();","tags":"getAgentsList","created_at":"2025-07-09 08:19:09","updated_at":"2025-07-09 08:19:09","input_zod_schema":{},"output_zod_schema":{},"input_example":"const agentsList = await codebolt.agent.getAgentsList('all');","output_example":"{\n  \"type\": \"listAgentsResponse\",\n  \"agents\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"codebolweb_deployment\",\n        \"description\": \"I am CodeBolt Deploy Agent. I can assist you with deploying your projects seamlessly. Please provide me with the project details, and I'll help you with the deployment process. What project would you like to deploy?\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"task\": {\n              \"type\": \"string\",\n              \"description\": \"The specific task to execute.\"\n            }\n          },\n          \"required\": [\"task\"],\n          \"additionalProperties\": false\n        },\n        \"strict\": true\n      }\n    },\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"code_generator_agent\",\n        \"description\": \"I am a Code Generator Agent. I can help you generate code based on your specifications and requirements.\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"task\": {\n              \"type\": \"string\",\n              \"description\": \"The code generation task to execute.\"\n            }\n          },\n          \"required\": [\"task\"],\n          \"additionalProperties\": false\n        },\n        \"strict\": true\n      }\n    }\n  ],\n  \"success\": true,\n  \"message\": \"Agents list retrieved successfully\",\n  \"messageId\": \"msg_123456\",\n  \"threadId\": \"thread_789\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"enum\": [\"downloaded\", \"all\", \"local\"],\n      \"description\": \"Optional: The type of agents to list. Defaults to 'downloaded'. Possible values are 'downloaded', 'all', 'local'.\",\n      \"default\": \"downloaded\"\n    }\n  },\n  \"required\": [],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"listAgentsResponse\",\n      \"description\": \"Always 'listAgentsResponse'.\"\n    },\n    \"agents\": {\n      \"type\": \"array\",\n      \"description\": \"An array of agent objects.\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"const\": \"function\",\n            \"description\": \"Always 'function'.\"\n          },\n          \"function\": {\n            \"type\": \"object\",\n            \"description\": \"Details of the agent function.\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\",\n                \"description\": \"The name or identifier of the agent.\"\n              },\n              \"description\": {\n                \"type\": \"string\",\n                \"description\": \"A detailed description of the agent's capabilities.\"\n              },\n              \"parameters\": {\n                \"type\": \"object\",\n                \"description\": \"An object specifying the parameters the agent accepts.\"\n              },\n              \"strict\": {\n                \"type\": \"boolean\",\n                \"description\": \"Indicates if the agent enforces strict parameter validation.\"\n              }\n            },\n            \"required\": [\"name\", \"description\", \"parameters\"],\n            \"additionalProperties\": false\n          }\n        },\n        \"required\": [\"type\", \"function\"],\n        \"additionalProperties\": false\n      }\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `type` parameter specifies which agents to retrieve:\n- 'downloaded': Only agents that have been downloaded locally\n- 'all': All available agents (both local and remote)\n- 'local': Only local agents","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--agent-getAgentsList","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: GetAgentsList\ncbbaseinfo:\n  description: Retrieves a list of agents based on the specified type.\ncbparameters:\n  parameters:\n    - name: type\n      typeName: string\n      description: \"Optional: The type of agents to list. Defaults to 'downloaded'. Possible values are 'downloaded', 'all', 'local'.\"\n  returns:\n    signatureTypeName: Promise<ListAgentsResponse>\n    description: A promise that resolves with a `ListAgentsResponse` object containing the list of agents.\ndata:\n  name: getAgentsList\n  category: agent\n  link: getAgentsList.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `ListAgentsResponse` object with the following properties:\n\n- **`type`** (string): Always \"listAgentsResponse\".\n- **`agents`** (array, optional): An array of agent objects.\n- **`success`** (boolean, optional): Indicates if the operation was successful.\n- **`message`** (string, optional): A message with additional information.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\nEach agent in the `agents` array has the following structure:\n- **`type`** (string): Always \"function\".\n- **`function`** (object): Details of the agent function, including:\n  - **`name`** (string): The name or identifier of the agent.\n  - **`description`** (string): A detailed description of the agent's capabilities.\n  - **`parameters`** (object): An object specifying the parameters the agent accepts.\n  - **`strict`** (boolean, optional): Indicates if the agent enforces strict parameter validation.\n\n### Notes\n- This function is useful for discovering available agents before using `findAgent` or `startAgent`.\n- The `agents` array in the response provides the necessary information, like the `name`, to interact with specific agents."}}