{"success":true,"data":{"id":25,"name":"Search","category_id":12,"category_name":"Browser","description":"Performs a search on the current page using a specified query.","short_description":"Perform search on current page","function":"codebolt.browser.search(elementid: string, query: string)","examples":"// Navigate to a page with a search feature\nawait codebolt.browser.goToPage(\"https://example.com\");\nawait new Promise(resolve => setTimeout(resolve, 2000));\n\n// Perform a search using the search input element\nconst searchResult = await codebolt.browser.search(\"search-input\", \"test query\");\nconsole.log('âœ… Search performed:', searchResult);\n\n// Check if the search was successful\nif (searchResult.success) {\n  console.log('Search query executed successfully');\n} else {\n  console.error('Search failed:', searchResult.error);\n}\n\n// Example with different search queries\nawait codebolt.browser.search(\"searchBox\", \"codebolt browser automation\");\nawait codebolt.browser.search(\"q\", \"JavaScript tutorials\");","tags":"search","created_at":"2025-07-09 11:44:17","updated_at":"2025-07-09 11:44:17","input_zod_schema":{},"output_zod_schema":{},"input_example":"const searchResult = await codebolt.browser.search(\"search-input\", \"test query\");","output_example":"{\n  \"type\": \"searchResponse\",\n  \"payload\": {\n    \"action\": \"search\",\n    \"success\": true,\n    \"content\": \"Search query executed: test query\",\n    \"viewport\": {\n      \"width\": 1920,\n      \"height\": 1080\n    }\n  },\n  \"eventId\": \"search_123456\",\n  \"success\": true,\n  \"message\": \"Search action completed successfully\",\n  \"messageId\": \"msg_123456\",\n  \"threadId\": \"thread_789\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"elementid\": {\n      \"type\": \"string\",\n      \"description\": \"The ID of the search input element.\",\n      \"minLength\": 1\n    },\n    \"query\": {\n      \"type\": \"string\",\n      \"description\": \"The search query.\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\"elementid\", \"query\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"searchResponse\",\n      \"description\": \"Always 'searchResponse'.\"\n    },\n    \"payload\": {\n      \"type\": \"object\",\n      \"description\": \"Contains the response data including search information.\",\n      \"properties\": {\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action that was performed.\"\n        },\n        \"success\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates if the search was successful.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"Additional content information.\"\n        },\n        \"viewport\": {\n          \"type\": \"object\",\n          \"description\": \"Current viewport information.\"\n        }\n      }\n    },\n    \"eventId\": {\n      \"type\": \"string\",\n      \"description\": \"Event identifier for the search action.\"\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `elementid` parameter must correspond to a valid search input element on the page. The `query` parameter contains the search terms to be entered.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--browser-search","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: search\ncbbaseinfo:\n  description: Performs a search on the current page using a specified query.\ncbparameters:\n  parameters:\n    - name: elementid\n      typeName: string\n      description: The ID of the search input element.\n    - name: query\n      typeName: string\n      description: The search query.\n  returns:\n    signatureTypeName: Promise<SearchResponse>\n    description: A promise that resolves with the search results.\n    typeArgs: []\ndata:\n  name: search\n  category: browser\n  link: search.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `BrowserActionResponseData` object with the following properties:\n\n- **`type`** (string): Always \"searchResponse\".\n- **`payload`** (object, optional): Contains the response data including search information\n- **`eventId`** (string, optional): Event identifier for the search action\n- **`success`** (boolean, optional): Indicates if the operation was successful\n- **`message`** (string, optional): A message with additional information\n- **`error`** (string, optional): Error details if the operation failed\n- **`messageId`** (string, optional): A unique identifier for the message\n- **`threadId`** (string, optional): The thread identifier\n\n### Notes\n\n- The `elementid` parameter must correspond to a valid search input element on the page\n- The search function types the query into the specified element and may trigger search automatically\n- This method is useful for automating search functionality on websites"}}