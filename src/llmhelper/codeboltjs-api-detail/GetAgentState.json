{"success":true,"data":{"id":27,"name":"GetAgentState","category_id":13,"category_name":"CBState","description":"Retrieves the current state of the agent from the server via WebSocket.","short_description":"Get current agent state","function":"codebolt.cbstate.getAgentState()","examples":"// Get all data stored in the current agent session\nconst agentState = await codebolt.cbstate.getAgentState();\n\nconsole.log('Response type:', agentState.type); // 'getAgentStateResponse'\nconsole.log('All agent data:', agentState.payload);\n\n// Access specific values you've stored\nconst userPreference = agentState.payload.user_preference;\nconst sessionId = agentState.payload.session_id;\nconst userLanguage = agentState.payload.user_language;\nconst debugMode = agentState.payload.debug_mode;\n\nconsole.log(`User Preference: ${userPreference}`);\nconsole.log(`Session ID: ${sessionId}`);\nconsole.log(`User Language: ${userLanguage}`);\nconsole.log(`Debug Mode: ${debugMode}`);","tags":"getAgentState","created_at":"2025-07-09 12:26:58","updated_at":"2025-07-09 12:26:58","input_zod_schema":{},"output_zod_schema":{},"input_example":"const agentState = await codebolt.cbstate.getAgentState();","output_example":"{\n  \"type\": \"getAgentStateResponse\",\n  \"payload\": {\n    \"ports\": [],\n    \"user_preference\": \"dark_theme\",\n    \"session_id\": \"sess_1750414044167\",\n    \"user_language\": \"en\",\n    \"debug_mode\": \"true\",\n    \"last_activity\": \"2025-06-20T10:07:24.167Z\",\n    \"user_preferences\": \"{\\\"theme\\\":\\\"dark\\\",\\\"notifications\\\":true}\"\n  }\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": [],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"getAgentStateResponse\",\n      \"description\": \"Always 'getAgentStateResponse'.\"\n    },\n    \"payload\": {\n      \"type\": \"object\",\n      \"description\": \"Contains all key-value pairs stored in the agent state.\",\n      \"additionalProperties\": true\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"This method takes no parameters and retrieves all key-value pairs stored in the current agent state.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--cbstate-getAgentState","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: getAgentState\ncbbaseinfo:\n  description: Retrieves the current state of the agent from the server via WebSocket.\ncbparameters:\n  parameters: []\n  returns:\n    signatureTypeName: Promise\n    description: A promise that resolves with the agent's state containing all key-value pairs stored via addToAgentState.\n    typeArgs:\n      - type: reference\n        name: GetAgentStateResponse\ndata:\n  name: getAgentState\n  category: cbstate\n  link: getAgentState.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `GetAgentStateResponse` object with the following properties:\n\n- **`type`** (string): Always \"getAgentStateResponse\".\n- **`payload`** (object, optional): Contains all key-value pairs stored in the agent state.\n- **`success`** (boolean, optional): Indicates if the operation was successful.\n- **`message`** (string, optional): A message with additional information.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\n## What is getAgentState?\n\nThe `getAgentState` function allows you to retrieve all the temporary information you've stored during your current agent session. Think of it as checking what's in your agent's temporary storage box - you can see everything you've saved using `addToAgentState`.\n\n**Key Points:**\n- üîç **Retrieve all data** - Get everything stored in the current agent session\n- ü§ñ **Agent-specific** - Only shows data for the current agent session\n- üìã **Complete overview** - See all keys and values at once\n- üîÑ **Real-time** - Always shows the most current state"}}