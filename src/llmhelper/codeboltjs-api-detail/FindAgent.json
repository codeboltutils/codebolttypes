{"success":true,"data":{"id":4,"name":"FindAgent","category_id":11,"category_name":"Agent","description":"Finds an agent suitable for the specified task using AI and/or vector database filtering.","short_description":"Find agents for specific tasks using AI and vector database filtering","function":"codebolt.agent.findAgent(task: string, maxResult: number, agents: array, agentLocation: string, getFrom: string)","examples":"// Example 1: Find the single best agent for a task (default parameters)\nconst agent = await codebolt.agent.findAgent(\"Write a function to calculate the factorial of a number\");\nconsole.log(\"Found Agent:\", agent);\n\n// Example 2: Find up to 5 agents for a task, searching both local and remote\nconst agents = await codebolt.agent.findAgent(\n  \"Create a simple Express.js server\",\n  5,\n  [],\n  'all',\n  'use_both'\n);\nconsole.log(\"Found Agents:\", agents);\n\n// Example 3: Find a local agent using only AI filtering\nconst aiFilteredAgent = await codebolt.agent.findAgent(\n  \"Analyze a dataset and create a visualization\",\n  1,\n  [],\n  'local_only',\n  'use_ai'\n);\nconsole.log(\"AI Filtered Agent:\", aiFilteredAgent);\n\n// Example 4: Find specific agents by name/ID from remote agents\nconst specificAgents = await codebolt.agent.findAgent(\n  \"Generate a CI/CD pipeline for a Node.js project\",\n  3,\n  ['ci-builder-agent', 'deployment-helper'],\n  'remote_only',\n  'use_vector_db'\n);\nconsole.log(\"Filtered Agents:\", specificAgents);","tags":"findAgent","created_at":"2025-07-09 08:02:32","updated_at":"2025-07-09 08:02:32","input_zod_schema":{},"output_zod_schema":{},"input_example":"const agents = await codebolt.agent.findAgent(\n  \"Create a simple Express.js server\",\n  5,\n  [],\n  \"all\",\n  \"use_both\"\n);","output_example":"{\n  \"type\": \"findAgentByTaskResponse\",\n  \"agents\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"codebolweb_deployment\",\n        \"description\": \"I am CodeBolt Deploy Agent. I can assist you with deploying your projects seamlessly. Please provide me with the project details, and I'll help you with the deployment process. What project would you like to deploy?\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"task\": {\n              \"type\": \"string\",\n              \"description\": \"The specific task to execute.\"\n            }\n          },\n          \"required\": [\"task\"],\n          \"additionalProperties\": false\n        },\n        \"strict\": true\n      }\n    }\n  ],\n  \"success\": true,\n  \"message\": \"Found 1 agent matching the task\",\n  \"messageId\": \"msg_123456\",\n  \"threadId\": \"thread_789\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"task\": {\n      \"type\": \"string\",\n      \"description\": \"The task description for which an agent is needed (e.g., \\\"Write a function to sum of Two number\\\", \\\"create node js app\\\")\",\n      \"minLength\": 1\n    },\n    \"maxResult\": {\n      \"type\": \"number\",\n      \"description\": \"Optional: Maximum number of agents to return. Defaults to 1.\",\n      \"minimum\": 1,\n      \"default\": 1\n    },\n    \"agents\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" },\n      \"description\": \"Optional: List of specific agent names or IDs to filter from the vector database. Defaults to an empty array (no filtering).\",\n      \"default\": []\n    },\n    \"agentLocation\": {\n      \"type\": \"string\",\n      \"enum\": [\"all\", \"local_only\", \"remote_only\"],\n      \"description\": \"Optional: Location preference for agents. Defaults to 'all'.\",\n      \"default\": \"all\"\n    },\n    \"getFrom\": {\n      \"type\": \"string\",\n      \"enum\": [\"use_ai\", \"use_vector_db\", \"use_both\"],\n      \"description\": \"Optional: The filtering method to use. Defaults to 'use_vector_db'.\",\n      \"default\": \"use_vector_db\"\n    }\n  },\n  \"required\": [\"task\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"findAgentByTaskResponse\",\n      \"description\": \"Always 'findAgentByTaskResponse'.\"\n    },\n    \"agents\": {\n      \"type\": \"array\",\n      \"description\": \"An array of agent objects that match the task.\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"type\": \"string\",\n            \"const\": \"function\",\n            \"description\": \"Always 'function'.\"\n          },\n          \"function\": {\n            \"type\": \"object\",\n            \"description\": \"Details of the agent function.\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\",\n                \"description\": \"The name or identifier of the agent.\"\n              },\n              \"description\": {\n                \"type\": \"string\",\n                \"description\": \"A detailed description of the agent's capabilities.\"\n              },\n              \"parameters\": {\n                \"type\": \"object\",\n                \"description\": \"An object specifying the parameters the agent accepts.\"\n              },\n              \"strict\": {\n                \"type\": \"boolean\",\n                \"description\": \"Indicates if the agent enforces strict parameter validation.\"\n              }\n            },\n            \"required\": [\"name\", \"description\", \"parameters\"],\n            \"additionalProperties\": false\n          }\n        },\n        \"required\": [\"type\", \"function\"],\n        \"additionalProperties\": false\n      }\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `task` parameter should be a clear and concise description of the desired action.\n`agentLocation` helps you control where to search for agents, which can be useful for security or performance reasons.\n`getFrom` allows you to choose between a faster vector-based search, a more intelligent AI-based search, or a combination of both.\nThe response will contain a list of agents that you can then use with `codebolt.agent.startAgent`.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--agent-findAgent","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: FindAgent\ncbbaseinfo:\n  description: Finds an agent suitable for the specified task using AI and/or vector database filtering.\ncbparameters:\n  parameters:\n    - name: task\n      typeName: string\n      description: The task description for which an agent is needed (e.g., \"Write a function to sum of Two number\", \"create node js app\").\n    - name: maxResult\n      typeName: number\n      description: \"Optional: Maximum number of agents to return. Defaults to 1.\"\n    - name: agents\n      typeName: array\n      description: \"Optional: List of specific agent names or IDs to filter from the vector database. Defaults to an empty array (no filtering).\"\n    - name: agentLocation\n      typeName: string\n      description: \"Optional: Location preference for agents. Defaults to 'all'. Possible values are 'all', 'local_only', 'remote_only'.\"\n    - name: getFrom\n      typeName: string\n      description: \"Optional: The filtering method to use. Defaults to 'use_vector_db'. Possible values are 'use_ai', 'use_vector_db', 'use_both'.\"\n  returns:\n    signatureTypeName: Promise<FindAgentByTaskResponse>\n    description: A promise that resolves with a `FindAgentByTaskResponse` object containing an array of found agents.\ndata:\n  name: findAgent\n  category: agent\n  link: findAgent.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `FindAgentByTaskResponse` object with the following properties:\n\n- **`type`** (string): Always \"findAgentByTaskResponse\".\n- **`agents`** (array, optional): An array of agent objects that match the task.\n- **`success`** (boolean, optional): Indicates if the operation was successful.\n- **`message`** (string, optional): A message with additional information.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\nEach agent in the `agents` array has the following structure:\n- **`type`** (string): Always \"function\".\n- **`function`** (object): Details of the agent function, including:\n  - **`name`** (string): The name or identifier of the agent.\n  - **`description`** (string): A detailed description of the agent's capabilities.\n  - **`parameters`** (object): An object specifying the parameters the agent accepts.\n  - **`strict`** (boolean, optional): Indicates if the agent enforces strict parameter validation.\n\n### Notes\n- The `task` parameter should be a clear and concise description of the desired action.\n- `agentLocation` helps you control where to search for agents, which can be useful for security or performance reasons.\n- `getFrom` allows you to choose between a faster vector-based search, a more intelligent AI-based search, or a combination of both.\n- The response will contain a list of agents that you can then use with `codebolt.agent.startAgent`."}}