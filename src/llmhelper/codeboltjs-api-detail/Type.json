{"success":true,"data":{"id":13,"name":"Type","category_id":12,"category_name":"Browser","description":"Types text into a specified element on the page.","short_description":"Type text into a page element by its ID","function":"codebolt.browser.type(elementid: string, text: string)","examples":"// Navigate to a page with input forms\nawait codebolt.browser.goToPage(\"https://example.com/form\");\nawait new Promise(resolve => setTimeout(resolve, 2000));\n\n// Type text into various input fields\nconst typeResult = await codebolt.browser.type(\"username\", \"testuser\");\nconsole.log('âœ… Typed username:', typeResult);\n\n// Check if the typing was successful\nif (typeResult.success) {\n  console.log('Text entered successfully');\n} else {\n  console.error('Typing failed:', typeResult.error);\n}\n\n// Type email into email field\nawait codebolt.browser.type(\"email\", \"user@example.com\");\n\n// Type password into password field\nawait codebolt.browser.type(\"password\", \"securepassword123\");\n\n// Type into a textarea\nawait codebolt.browser.type(\"message\", \"This is a test message\");","tags":"type","created_at":"2025-07-09 11:44:00","updated_at":"2025-07-09 11:44:00","input_zod_schema":{},"output_zod_schema":{},"input_example":"const typeResult = await codebolt.browser.type(\"username\", \"testuser\");","output_example":"{\n  \"type\": \"typeResponse\",\n  \"payload\": {\n    \"action\": \"type\",\n    \"success\": true,\n    \"content\": \"Text typed successfully\",\n    \"viewport\": {\n      \"width\": 1920,\n      \"height\": 1080\n    }\n  },\n  \"eventId\": \"type_123456\",\n  \"success\": true,\n  \"message\": \"Text typed successfully\",\n  \"messageId\": \"msg_123456\",\n  \"threadId\": \"thread_789\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"elementid\": {\n      \"type\": \"string\",\n      \"description\": \"The ID of the element to type into.\",\n      \"minLength\": 1\n    },\n    \"text\": {\n      \"type\": \"string\",\n      \"description\": \"The text to type.\",\n      \"minLength\": 0\n    }\n  },\n  \"required\": [\"elementid\", \"text\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"typeResponse\",\n      \"description\": \"Always 'typeResponse'.\"\n    },\n    \"payload\": {\n      \"type\": \"object\",\n      \"description\": \"Contains the response data including action details.\",\n      \"properties\": {\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action that was performed.\"\n        },\n        \"success\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates if the typing was successful.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"Additional content information.\"\n        },\n        \"viewport\": {\n          \"type\": \"object\",\n          \"description\": \"Current viewport information.\"\n        }\n      }\n    },\n    \"eventId\": {\n      \"type\": \"string\",\n      \"description\": \"Event identifier for the type action.\"\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `elementid` parameter must correspond to an existing input element ID on the current page.\nThe `text` parameter contains the text to type into the element.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--browser-type","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: type\ncbbaseinfo:\n  description: Types text into a specified element on the page.\ncbparameters:\n  parameters:\n    - name: elementid\n      typeName: string\n      description: The ID of the element to type into.\n    - name: text\n      typeName: string\n      description: The text to type.\n  returns:\n    signatureTypeName: Promise<TypeResponse>\n    description: A promise that resolves when the typing action is complete.\n    typeArgs: []\ndata:\n  name: type\n  category: browser\n  link: type.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `BrowserActionResponseData` object with the following properties:\n\n- **`type`** (string): Always \"typeResponse\".\n- **`payload`** (object, optional): Contains the response data including action details\n- **`eventId`** (string, optional): Event identifier for the type action\n- **`success`** (boolean, optional): Indicates if the operation was successful\n- **`message`** (string, optional): A message with additional information\n- **`error`** (string, optional): Error details if the operation failed\n- **`messageId`** (string, optional): A unique identifier for the message\n- **`threadId`** (string, optional): The thread identifier\n\n### Important Note\n\nThe `type()` function requires the target input element to have a specific ID and be present on the page. Interactive tests like `type()` require specific element IDs which may not be available on all pages. Ensure that the target input element exists and is editable before calling this function.\n\n### Explanation\n\nThe `codebolt.browser.type(elementid, text)` function simulates typing text into a specified input element on the current web page. The function takes two parameters: an element ID (string) and the text to type (string). It returns a promise that resolves when the typing action is complete. This function is essential for automating form filling, data entry, search queries, and any scenario where text input is required. It works with various input types including text fields, email fields, password fields, and textareas."}}