{"success":true,"data":{"id":31,"name":"AskQuestion","category_id":14,"category_name":"Chat","description":"Asks a question to the user.","short_description":"Ask interactive question to user","function":"codebolt.chat.askQuestion(question: string, buttons?: string[], withFeedback?: boolean)","examples":"// Example 1: Simple question with default options (no buttons)\nconst response1 = await codebolt.chat.askQuestion(\"What would you like to do next?\");\nconsole.log('User response:', response1);\n\n// Example 2: Question with custom button options\nconst response2 = await codebolt.chat.askQuestion(\n    \"How would you like to proceed?\",\n    [\"Continue\", \"Skip\", \"Cancel\"]\n);\nconsole.log('Selected option:', response2);\n\n// Example 3: Question with buttons and feedback input enabled\nconst response3 = await codebolt.chat.askQuestion(\n    \"Are you satisfied with the current results?\",\n    [\"Yes\", \"No\", \"Need Improvements\"],\n    true\n);\nconsole.log('User feedback:', response3);\n\n// Example 4: Configuration choice question\nconst configChoice = await codebolt.chat.askQuestion(\n    \"Which configuration would you like to use?\",\n    [\"Development\", \"Staging\", \"Production\"],\n    false\n);\nconsole.log('Selected configuration:', configChoice);","tags":"askQuestion","created_at":"2025-07-09 12:34:30","updated_at":"2025-07-09 12:34:30","input_zod_schema":{},"output_zod_schema":{},"input_example":"const response = await codebolt.chat.askQuestion(\"What would you like to do next?\", [\"Continue\", \"Skip\"], true);","output_example":"\"Continue\"","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"question\": {\n      \"type\": \"string\",\n      \"description\": \"The question text to present to the user.\",\n      \"minLength\": 1\n    },\n    \"buttons\": {\n      \"type\": \"array\",\n      \"description\": \"An array of button labels. Defaults to an empty array if not specified.\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"default\": []\n    },\n    \"withFeedback\": {\n      \"type\": \"boolean\",\n      \"description\": \"Whether to allow additional feedback input. Default is false.\",\n      \"default\": false\n    }\n  },\n  \"required\": [\"question\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"string\",\n  \"description\": \"The user's response or button selection as a string.\"\n}","input_variable_description":"The `question` parameter is required and contains the question text. The `buttons` parameter is optional and provides custom button options. The `withFeedback` parameter is optional and enables additional text input.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--chat-askQuestion","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: askQuestion\ncbbaseinfo:\n  description: Asks a question to the user.\ncbparameters:\n  parameters:\n    - name: question\n      typeName: string\n      description: The question text to present to the user.\n    - name: buttons\n      typeName: string[]\n      description: An array of button labels. Defaults to an empty array if not specified.\n    - name: withFeedback\n      typeName: boolean\n      description: Whether to allow additional feedback input. Default is false.\n  returns:\n    signatureTypeName: Promise\n    description: A promise that resolves with the user's response.\n    typeArgs:\n      - type: intrinsic\n        name: askQuestion \ndata:\n  name: askQuestion\n  category: chat\n  link: askQuestion.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `string` containing the user's response or button selection.\n\nThis method waits for the user to respond to the question and returns their selection as a string. The response corresponds to:\n- The text of the button the user clicked (if buttons are provided)\n- The feedback text if `withFeedback` is enabled and the user provides additional input\n- Free-form text input if no buttons are specified\n- The exact button label if custom buttons are provided\n\n### Explanation\n\n- **Interactive Communication**: This function creates an interactive dialog with the user, pausing script execution until a response is received\n- **Button Customization**: You can provide custom button labels to give users specific options to choose from\n- **Feedback Option**: When `withFeedback` is true, users can provide additional text input along with their button selection\n- **Asynchronous Operation**: The function returns a Promise that resolves with the user's response as a string\n- **Default Behavior**: If no buttons are provided, the user can input free-form text as their response"}}