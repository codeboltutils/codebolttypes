{"success":true,"data":{"id":24,"name":"Scroll","category_id":12,"category_name":"Browser","description":"Scrolls the current page in a specified direction by a specified number of pixels.","short_description":"Scroll page in specified direction","function":"codebolt.browser.scroll(direction: string, pixels: string)","examples":"// Navigate to a page with scrollable content\nawait codebolt.browser.goToPage(\"https://example.com\");\n\n// Wait for page to load\nawait new Promise(resolve => setTimeout(resolve, 2000));\n\n// Scroll down the page by 100 pixels\nconst scrollResult = await codebolt.browser.scroll(\"down\", \"100\");\nconsole.log('âœ… Scrolled:', scrollResult);\n\n// Check if the scroll was successful\nif (scrollResult.success) {\n  console.log('Page scrolled successfully');\n} else {\n  console.error('Scroll failed:', scrollResult.error);\n}\n\n// You can also scroll in other directions\nawait codebolt.browser.scroll(\"up\", \"50\");\nawait codebolt.browser.scroll(\"left\", \"100\");\nawait codebolt.browser.scroll(\"right\", \"100\");","tags":"scroll","created_at":"2025-07-09 11:44:16","updated_at":"2025-07-09 11:44:16","input_zod_schema":{},"output_zod_schema":{},"input_example":"const scrollResult = await codebolt.browser.scroll(\"down\", \"100\");","output_example":"{\n  \"type\": \"scrollResponse\",\n  \"payload\": {\n    \"action\": \"scroll\",\n    \"success\": true,\n    \"content\": \"Scrolled down by 100 pixels\",\n    \"viewport\": {\n      \"width\": 1920,\n      \"height\": 1080,\n      \"scrollX\": 0,\n      \"scrollY\": 100\n    }\n  },\n  \"eventId\": \"scroll_123456\",\n  \"success\": true,\n  \"message\": \"Scroll action completed successfully\",\n  \"messageId\": \"msg_123456\",\n  \"threadId\": \"thread_789\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"direction\": {\n      \"type\": \"string\",\n      \"description\": \"The direction to scroll.\",\n      \"enum\": [\"up\", \"down\", \"left\", \"right\"]\n    },\n    \"pixels\": {\n      \"type\": \"string\",\n      \"description\": \"The number of pixels to scroll.\",\n      \"pattern\": \"^[0-9]+$\"\n    }\n  },\n  \"required\": [\"direction\", \"pixels\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"scrollResponse\",\n      \"description\": \"Always 'scrollResponse'.\"\n    },\n    \"payload\": {\n      \"type\": \"object\",\n      \"description\": \"Contains the response data including scroll information.\",\n      \"properties\": {\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action that was performed.\"\n        },\n        \"success\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates if the scroll was successful.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"Additional content information.\"\n        },\n        \"viewport\": {\n          \"type\": \"object\",\n          \"description\": \"Updated viewport information after scrolling.\",\n          \"properties\": {\n            \"width\": {\n              \"type\": \"number\",\n              \"description\": \"Viewport width in pixels.\"\n            },\n            \"height\": {\n              \"type\": \"number\",\n              \"description\": \"Viewport height in pixels.\"\n            },\n            \"scrollX\": {\n              \"type\": \"number\",\n              \"description\": \"Horizontal scroll position.\"\n            },\n            \"scrollY\": {\n              \"type\": \"number\",\n              \"description\": \"Vertical scroll position.\"\n            }\n          }\n        }\n      }\n    },\n    \"eventId\": {\n      \"type\": \"string\",\n      \"description\": \"Event identifier for the scroll action.\"\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `direction` parameter accepts values: \"up\", \"down\", \"left\", \"right\". The `pixels` parameter should be a string representing the number of pixels to scroll.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--browser-scroll","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: scroll\ncbbaseinfo:\n  description: >-\n    Scrolls the current page in a specified direction by a specified number of\n    pixels.\ncbparameters:\n  parameters:\n    - name: direction\n      typeName: string\n      description: The direction to scroll (e.g., 'down', 'up', 'left', 'right').\n    - name: pixels\n      typeName: string\n      description: The number of pixels to scroll.\n  returns:\n    signatureTypeName: Promise<ScrollResponse>\n    description: A promise that resolves when the scroll action is complete.\n    typeArgs: []\ndata:\n  name: scroll\n  category: browser\n  link: scroll.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `BrowserActionResponseData` object with the following properties:\n\n- **`type`** (string): Always \"scrollResponse\".\n- **`payload`** (object, optional): Contains the response data including scroll information\n- **`eventId`** (string, optional): Event identifier for the scroll action\n- **`success`** (boolean, optional): Indicates if the operation was successful\n- **`message`** (string, optional): A message with additional information\n- **`error`** (string, optional): Error details if the operation failed\n- **`messageId`** (string, optional): A unique identifier for the message\n- **`threadId`** (string, optional): The thread identifier\n\n### Notes\n\n- The `direction` parameter accepts values: \"up\", \"down\", \"left\", \"right\"\n- The `pixels` parameter should be a string representing the number of pixels to scroll\n- The viewport information in the response reflects the new scroll position"}}