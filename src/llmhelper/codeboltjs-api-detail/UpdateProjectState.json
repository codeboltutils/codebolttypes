{"success":true,"data":{"id":30,"name":"UpdateProjectState","category_id":13,"category_name":"CBState","description":"Updates the project state on the server via WebSocket.","short_description":"Update project state key-value pair","function":"codebolt.cbstate.updateProjectState(key: string, value: any)","examples":"// Save your project name\nawait codebolt.cbstate.updateProjectState('project_name', 'My Awesome App');\n\n// Store text\nawait codebolt.cbstate.updateProjectState('project_description', 'A cool web application');\n\n// Store numbers (as strings)\nawait codebolt.cbstate.updateProjectState('version_number', '1.0.0');\n\n// Store dates\nawait codebolt.cbstate.updateProjectState('created_date', new Date().toISOString());\n\n// Store true/false values\nawait codebolt.cbstate.updateProjectState('is_published', 'true');\n\n// Store user preferences as JSON\nconst userPreferences = {\n    theme: 'dark',\n    language: 'english',\n    notifications: true,\n    autoSave: true\n};\nawait codebolt.cbstate.updateProjectState('user_preferences', JSON.stringify(userPreferences));","tags":"updateProjectState","created_at":"2025-07-09 12:27:02","updated_at":"2025-07-09 12:27:02","input_zod_schema":{},"output_zod_schema":{},"input_example":"await codebolt.cbstate.updateProjectState('project_name', 'My Awesome App');","output_example":"{\n  \"type\": \"updateProjectStateResponse\",\n  \"message\": \"success\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"key\": {\n      \"type\": \"string\",\n      \"description\": \"The key of the project state property to update.\",\n      \"minLength\": 1\n    },\n    \"value\": {\n      \"description\": \"The new value to set for the specified key.\"\n    }\n  },\n  \"required\": [\"key\", \"value\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"updateProjectStateResponse\",\n      \"description\": \"Always 'updateProjectStateResponse'.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"Contains the result of the update operation. When successful, this will be 'success'.\"\n    },\n    \"state\": {\n      \"type\": \"object\",\n      \"description\": \"May contain the updated state information.\",\n      \"additionalProperties\": true\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `key` parameter is a string identifier for the project state property to update. The `value` parameter can be any type and will be stored as the new value for the specified key.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--cbstate-updateProjectState","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: updateProjectState\ncbbaseinfo:\n  description: Updates the project state on the server via WebSocket.\ncbparameters:\n  parameters:\n    - name: key\n      typeName: string\n      description: The key of the project state property to update.\n    - name: value\n      typeName: any\n      description: The new value to set for the specified key.\n  returns:\n    signatureTypeName: Promise\n    description: A promise that resolves with the update response containing success confirmation.\n    typeArgs:\n      - type: reference\n        name: UpdateProjectStateResponse\ndata:\n  name: updateProjectState\n  category: cbstate\n  link: updateProjectState.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to an `UpdateProjectStateResponse` object with the following properties:\n\n- **`type`** (string): Always \"updateProjectStateResponse\".\n- **`message`** (string): Contains the result of the update operation. When successful, this will be \"success\".\n- **`state`** (object, optional): May contain the updated state information.\n- **`success`** (boolean, optional): Indicates if the operation was successful.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\n## What is updateProjectState?\n\nThe `updateProjectState` function allows you to save and update information that needs to be shared across your entire project. Think of it as a project-wide storage system where you can store settings, configurations, and data that should persist and be accessible from anywhere in your project.\n\n**Key Points:**\n- üìÅ **Project-wide storage** - Data is available throughout your entire project\n- üíæ **Persistent** - Information stays saved even after restarting\n- üîÑ **Real-time updates** - Changes are immediately available\n- üåê **Shared** - All parts of your project can access the same data"}}