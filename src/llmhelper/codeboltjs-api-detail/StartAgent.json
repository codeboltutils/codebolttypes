{"success":true,"data":{"id":7,"name":"StartAgent","category_id":11,"category_name":"Agent","description":"Starts an agent with a specific task.","short_description":"Start an agent to execute a specific task","function":"codebolt.agent.startAgent(agentId: string, task: string)","examples":"// Example 1: Find an agent and then start it\nasync function findAndStartAgent() {\n  try {\n    // Find an agent for a specific task\n    const findResult = await codebolt.agent.findAgent(\"Create a REST API with Express\");\n    \n    if (findResult?.agents && findResult.agents.length > 0) {\n      const agentId = findResult.agents[0].function.name;\n      const task = \"Create a new Express.js project with a single endpoint '/hello' that returns 'Hello, World!'\";\n      \n      console.log(`Starting agent '${agentId}' with task: ${task}`);\n      \n      // Start the agent with the found ID and a specific task\n      const startResult = await codebolt.agent.startAgent(agentId, task);\n      \n      console.log(\"Agent execution finished:\", startResult);\n      if (startResult.success) {\n        console.log(\"Result:\", startResult.result);\n      } else {\n        console.error(\"Error:\", startResult.error);\n      }\n    } else {\n      console.log(\"No suitable agent found for the task.\");\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n  }\n}\n\nfindAndStartAgent();\n\n// Example 2: Start an agent directly with a known agent ID\nasync function startKnownAgent() {\n  try {\n    const agentId = \"code-generator-agent\"; // A known agent ID\n    const task = \"Generate a Python function to find prime numbers up to n.\";\n    \n    console.log(`Starting known agent '${agentId}'`);\n    \n    const response = await codebolt.agent.startAgent(agentId, task);\n    \n    console.log(\"Agent response:\", response);\n  } catch (error) {\n    console.error(\"Failed to start agent:\", error);\n  }\n}\n\nstartKnownAgent();","tags":"startAgent","created_at":"2025-07-09 08:21:39","updated_at":"2025-07-09 08:21:39","input_zod_schema":{},"output_zod_schema":{},"input_example":"const result = await codebolt.agent.startAgent(\n  \"code-generator-agent\",\n  \"Generate a Python function to find prime numbers up to n.\"\n);","output_example":"{\n  \"type\": \"taskCompletionResponse\",\n  \"from\": \"agent-system\",\n  \"agentId\": \"code-generator-agent\",\n  \"task\": \"Generate a Python function to find prime numbers up to n.\",\n  \"result\": {\n    \"code\": \"def find_primes(n):\\n    primes = []\\n    for num in range(2, n + 1):\\n        is_prime = True\\n        for i in range(2, int(num ** 0.5) + 1):\\n            if num % i == 0:\\n                is_prime = False\\n                break\\n        if is_prime:\\n            primes.append(num)\\n    return primes\",\n    \"explanation\": \"This function finds all prime numbers up to n using trial division method.\"\n  },\n  \"success\": true,\n  \"message\": \"Agent task completed successfully\",\n  \"messageId\": \"msg_123456\",\n  \"threadId\": \"thread_789\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"agentId\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier of the agent to start.\",\n      \"minLength\": 1\n    },\n    \"task\": {\n      \"type\": \"string\",\n      \"description\": \"The task description for the agent to execute.\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\"agentId\", \"task\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"taskCompletionResponse\",\n      \"description\": \"Always 'taskCompletionResponse'.\"\n    },\n    \"from\": {\n      \"type\": \"string\",\n      \"description\": \"The source of the response.\"\n    },\n    \"agentId\": {\n      \"type\": \"string\",\n      \"description\": \"The ID of the agent that was started.\"\n    },\n    \"task\": {\n      \"type\": \"string\",\n      \"description\": \"The task that was assigned to the agent.\"\n    },\n    \"result\": {\n      \"description\": \"Any result data from the agent's execution.\"\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the agent started and completed the task successfully.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `agentId` parameter is the unique identifier of the agent you want to start. You can obtain this from `findAgent` or `getAgentsList`.\nThe `task` parameter should be a specific instruction for the agent to perform.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--agent-startAgent","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: StartAgent\ncbbaseinfo:\n  description: Starts an agent with a specific task.\ncbparameters:\n  parameters:\n    - name: agentId\n      typeName: string\n      description: The unique identifier of the agent to start.\n    - name: task\n      typeName: string\n      description: The task description for the agent to execute.\n  returns:\n    signatureTypeName: Promise<TaskCompletionResponse>\n    description: A promise that resolves with a `TaskCompletionResponse` object upon agent completion.\ndata:\n  name: startAgent\n  category: agent\n  link: startAgent.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `TaskCompletionResponse` object with the following properties:\n\n- **`type`** (string): Always \"taskCompletionResponse\".\n- **`from`** (string, optional): The source of the response.\n- **`agentId`** (string, optional): The ID of the agent that was started.\n- **`task`** (string, optional): The task that was assigned to the agent.\n- **`result`** (any, optional): Any result data from the agent's execution.\n- **`success`** (boolean, optional): Indicates if the agent started and completed the task successfully.\n- **`message`** (string, optional): A message with additional information.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\n### Notes\n- Before starting an agent, you typically need to know its `agentId`. You can get this ID by using `findAgent` or `getAgentsList`.\n- The `task` should be a specific instruction for the agent to perform.\n- The `TaskCompletionResponse` provides detailed information about the outcome of the agent's execution."}}