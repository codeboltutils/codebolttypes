{"success":true,"data":{"id":32,"name":"GetChatHistory","category_id":14,"category_name":"Chat","description":"Retrieves the chat history from the server.","short_description":"Get conversation history","function":"codebolt.chat.getChatHistory()","examples":"// Retrieve the chat history from the server\nconst chatHistory = await codebolt.chat.getChatHistory();\nconsole.log('Chat history retrieved:', chatHistory);\n\n// Access individual chat messages\nconst messages = chatHistory.chats;\nmessages.forEach((message, index) => {\n    console.log(`Message ${index + 1}:`, {\n        sender: message.sender,\n        content: message.content,\n        timestamp: message.timestamp,\n        actionType: message.actionType\n    });\n});\n\n// Filter messages by sender\nconst agentMessages = chatHistory.chats.filter(msg => msg.sender === 'agent');\nconst userMessages = chatHistory.chats.filter(msg => msg.sender === 'user');\n\nconsole.log(`Found ${agentMessages.length} agent messages and ${userMessages.length} user messages`);","tags":"getChatHistory","created_at":"2025-07-09 12:34:31","updated_at":"2025-07-09 12:34:31","input_zod_schema":{},"output_zod_schema":{},"input_example":"const chatHistory = await codebolt.chat.getChatHistory();","output_example":"{\n  \"type\": \"getChatHistoryResponse\",\n  \"messages\": [\n    {\n      \"id\": \"msg_123456\",\n      \"content\": \"Hello, how can I help you?\",\n      \"sender\": \"agent\",\n      \"timestamp\": \"2025-01-20T10:30:00.000Z\",\n      \"type\": \"text\"\n    },\n    {\n      \"id\": \"msg_123457\",\n      \"content\": \"I need help with my project\",\n      \"sender\": \"user\",\n      \"timestamp\": \"2025-01-20T10:31:00.000Z\",\n      \"type\": \"text\"\n    }\n  ],\n  \"agentId\": \"agent_789\",\n  \"success\": true\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": [],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"getChatHistoryResponse\",\n      \"description\": \"Always 'getChatHistoryResponse'.\"\n    },\n    \"messages\": {\n      \"type\": \"array\",\n      \"description\": \"An array of chat message objects containing the conversation history.\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"Unique identifier for the message.\"\n          },\n          \"content\": {\n            \"type\": \"string\",\n            \"description\": \"The actual message content/text.\"\n          },\n          \"sender\": {\n            \"type\": \"string\",\n            \"enum\": [\"agent\", \"user\"],\n            \"description\": \"Who sent the message.\"\n          },\n          \"timestamp\": {\n            \"type\": \"string\",\n            \"description\": \"When the message was sent (ISO 8601 format).\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"description\": \"Type of the message.\"\n          }\n        }\n      }\n    },\n    \"agentId\": {\n      \"type\": \"string\",\n      \"description\": \"Identifier for the agent associated with the chat history.\"\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"This method takes no parameters and retrieves the complete chat history from the server.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--chat-getChatHistory","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: getChatHistory\ncbbaseinfo:\n  description: Retrieves the chat history from the server.\ncbparameters:\n  parameters: []\n  returns:\n    signatureTypeName: Promise\n    description: >-\n      A promise that resolves with an array of ChatMessage objects representing\n      the chat history.\n    typeArgs:\n      - type: array\n        name: ChatMessage\ndata:\n  name: getChatHistory\n  category: chat\n  link: getChatHistory.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `GetChatHistoryResponse` object with the following properties:\n\n- **`type`** (string): Always \"getChatHistoryResponse\".\n- **`messages`** (array, optional): An array of chat message objects containing the conversation history.\n- **`agentId`** (string, optional): Identifier for the agent associated with the chat history\n- **`success`** (boolean, optional): Indicates if the operation was successful.\n- **`message`** (string, optional): A message with additional information.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\n### Explanation\n\nThis function basically helps us get all the previous messages from our Codebolt chats. It returns a comprehensive history including message content, metadata, and timing information for each interaction in the conversation thread."}}