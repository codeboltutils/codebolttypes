{"success":true,"data":{"id":90,"name":"addToken","category_id":27,"category_name":"Tokenizer","description":"Adds a token to the system and returns tokenized array. This method processes the provided key/string and stores it in the tokenization system for future use.","short_description":"Adds a token to the system and returns tokenized array. This method processes the provided key/string and stores it in the tokenization system for future use.","function":"codebolt.tokenizer.addToken(key: string) -> Promise<AddTokenResponse>","examples":[{"title":"Basic token addition and error handling","code":"// Basic token addition\nconst result = await codebolt.tokenizer.addToken('api_key_1');\nconsole.log('Response type:', result.type); // 'addTokenResponse'\nconsole.log('Token added:', result.token); // 'api_key_1'\nconsole.log('Token count:', result.count); // Number of tokens processed\n\n// Add a complex token with error handling\nconst tokenResult = await codebolt.tokenizer.addToken('user_session_token_12345');\nif (tokenResult.success) {\n  console.log('✅ Token added successfully');\n  console.log('Token:', tokenResult.token);\n  console.log('Count:', tokenResult.count);\n} else {\n  console.error('❌ Failed to add token:', tokenResult.error);\n}\n\n// Error handling with try-catch\ntry {\n  const response = await codebolt.tokenizer.addToken('my_token');\n  \n  if (response.success && response.token) {\n    console.log('✅ Token added successfully');\n    console.log('Token:', response.token);\n    console.log('Count:', response.count);\n  } else {\n    console.error('❌ Token addition failed:', response.error);\n  }\n} catch (error) {\n  console.error('Error adding token:', error);\n}"},{"title":"Batch token addition","code":"// Batch token addition\nconst tokensToAdd = [\n  'auth_token_1',\n  'session_token_2', \n  'api_key_3'\n];\n\nfor (const token of tokensToAdd) {\n  const result = await codebolt.tokenizer.addToken(token);\n  if (result.success) {\n    console.log(`✅ Added token: ${result.token} (count: ${result.count})`);\n  } else {\n    console.log(`❌ Failed to add token: ${token}`);\n  }\n}\n\n// Advanced token processing\nconst processTokens = async (tokens) => {\n  const results = [];\n  \n  for (const token of tokens) {\n    try {\n      const result = await codebolt.tokenizer.addToken(token);\n      results.push({\n        token,\n        success: result.success,\n        count: result.count,\n        error: result.error\n      });\n    } catch (error) {\n      results.push({\n        token,\n        success: false,\n        error: error.message\n      });\n    }\n  }\n  \n  return results;\n};\n\nconst tokenResults = await processTokens(['token1', 'token2', 'token3']);\nconsole.log('Batch processing results:', tokenResults);"}],"tags":[],"created_at":"2025-07-10 07:49:50","updated_at":"2025-07-10 07:49:50","input_zod_schema":{},"output_zod_schema":{},"input_example":{},"output_example":{},"input_json_schema":{"type":"object","properties":{"key":{"type":"string","description":"The key/string to be tokenized."}},"required":["key"]},"output_json_schema":{"type":"object","properties":{"type":{"type":"string","enum":["addTokenResponse"]},"token":{"type":"string"},"count":{"type":"number"},"success":{"type":"boolean"},"message":{"type":"string"},"error":{"type":"string"},"messageId":{"type":"string"},"threadId":{"type":"string"}},"required":["type"]},"input_variable_description":{},"output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--tokenizer-addToken","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: addToken\ncbbaseinfo:\n  description: Adds a token to the system and returns tokenized array.\ncbparameters:\n  parameters:\n    - name: key\n      typeName: string\n      description: The key/string to be tokenized.\n  returns:\n    signatureTypeName: Promise<AddTokenResponse>\n    description: A promise that resolves with an AddTokenResponse object containing the tokenization response.\ndata:\n  name: addToken\n  category: tokenizer\n  link: addToken.md\n---"}}