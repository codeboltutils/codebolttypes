{"success":true,"data":{"id":8,"name":"Click","category_id":12,"category_name":"Browser","description":"Clicks on a specified element on the page.","short_description":"Click on a page element by its ID","function":"codebolt.browser.click(elementid: string)","examples":"// Navigate to a page with interactive elements\nawait codebolt.browser.goToPage(\"https://example.com\");\nawait new Promise(resolve => setTimeout(resolve, 2000));\n\n// Click on a button with the ID \"submit-btn\"\nconst clickResult = await codebolt.browser.click(\"submit-btn\");\nconsole.log('âœ… Clicked:', clickResult);\n\n// Check if the click was successful\nif (clickResult.success) {\n  console.log('Click action completed successfully');\n} else {\n  console.error('Click failed:', clickResult.error);\n}\n\n// Click on a link with a specific ID\nawait codebolt.browser.click(\"nav-link\");\n\n// Click on a checkbox or radio button\nawait codebolt.browser.click(\"checkbox-id\");","tags":"click","created_at":"2025-07-09 11:43:53","updated_at":"2025-07-09 11:43:53","input_zod_schema":{},"output_zod_schema":{},"input_example":"const clickResult = await codebolt.browser.click(\"submit-btn\");","output_example":"{\n  \"type\": \"clickResponse\",\n  \"payload\": {\n    \"action\": \"click\",\n    \"success\": true,\n    \"content\": \"Element clicked successfully\",\n    \"viewport\": {\n      \"width\": 1920,\n      \"height\": 1080\n    }\n  },\n  \"eventId\": \"click_123456\",\n  \"success\": true,\n  \"message\": \"Click action completed successfully\",\n  \"messageId\": \"msg_123456\",\n  \"threadId\": \"thread_789\"\n}","input_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"elementid\": {\n      \"type\": \"string\",\n      \"description\": \"The ID of the element to click.\",\n      \"minLength\": 1\n    }\n  },\n  \"required\": [\"elementid\"],\n  \"additionalProperties\": false\n}","output_json_schema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"type\": {\n      \"type\": \"string\",\n      \"const\": \"clickResponse\",\n      \"description\": \"Always 'clickResponse'.\"\n    },\n    \"payload\": {\n      \"type\": \"object\",\n      \"description\": \"Contains the response data including action details.\",\n      \"properties\": {\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action that was performed.\"\n        },\n        \"success\": {\n          \"type\": \"boolean\",\n          \"description\": \"Indicates if the click was successful.\"\n        },\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"Additional content information.\"\n        },\n        \"viewport\": {\n          \"type\": \"object\",\n          \"description\": \"Current viewport information.\",\n          \"properties\": {\n            \"width\": {\n              \"type\": \"number\",\n              \"description\": \"Viewport width in pixels.\"\n            },\n            \"height\": {\n              \"type\": \"number\",\n              \"description\": \"Viewport height in pixels.\"\n            }\n          }\n        }\n      }\n    },\n    \"eventId\": {\n      \"type\": \"string\",\n      \"description\": \"Event identifier for the click action.\"\n    },\n    \"success\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicates if the operation was successful.\"\n    },\n    \"message\": {\n      \"type\": \"string\",\n      \"description\": \"A message with additional information.\"\n    },\n    \"error\": {\n      \"type\": \"string\",\n      \"description\": \"Error details if the operation failed.\"\n    },\n    \"messageId\": {\n      \"type\": \"string\",\n      \"description\": \"A unique identifier for the message.\"\n    },\n    \"threadId\": {\n      \"type\": \"string\",\n      \"description\": \"The thread identifier.\"\n    }\n  },\n  \"required\": [\"type\"],\n  \"additionalProperties\": false\n}","input_variable_description":"The `elementid` parameter must correspond to an existing element ID on the current page.\nThe element must be visible and clickable for the operation to succeed.","output_variable_description":{},"additional_notes":{},"mcp_server_name":"codebolt--browser-click","mcp_server_function":{},"common_use_cases":{},"raw_content":"---\nname: click\ncbbaseinfo:\n  description: Clicks on a specified element on the page.\ncbparameters:\n  parameters:\n    - name: elementid\n      typeName: string\n      description: The ID of the element to click.\n  returns:\n    signatureTypeName: Promise<ClickResponse>\n    description: A promise that resolves when the click action is complete.\n    typeArgs: []\ndata:\n  name: click\n  category: browser\n  link: click.md\n---\n\n### Response Structure\n\nThe method returns a Promise that resolves to a `BrowserActionResponseData` object with the following properties:\n\n- **`type`** (string): Always \"clickResponse\".\n- **`payload`** (object, optional): Contains the response data including action details.\n- **`eventId`** (string, optional): Event identifier for the click action.\n- **`success`** (boolean, optional): Indicates if the operation was successful.\n- **`message`** (string, optional): A message with additional information.\n- **`error`** (string, optional): Error details if the operation failed.\n- **`messageId`** (string, optional): A unique identifier for the message.\n- **`threadId`** (string, optional): The thread identifier.\n\n### Notes\n\n- The `elementid` parameter must correspond to an existing element ID on the current page\n- The element must be visible and clickable for the operation to succeed\n- The response provides confirmation of the click action and any relevant page state changes"}}